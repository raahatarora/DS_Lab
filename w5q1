#include <iostream>
using namespace std;

class Stack {
private:
    int top;
    int maxSize;
    int* stackArray;

public:
    // Constructor to initialize the stack
    Stack(int size) {
        maxSize = size;
        stackArray = new int[maxSize];
        top = -1; // Indicates an empty stack
    }

    // Destructor to clean up the stack
    ~Stack() {
        delete[] stackArray;
    }

    // Function to check if the stack is empty
    bool isEmpty() {
        return top == -1;
    }

    // Function to check if the stack is full
    bool isFull() {
        return top == maxSize - 1;
    }

    // Function to push an element onto the stack
    void push(int value) {
        if (isFull()) {
            cout << "Stack Overflow! Unable to push " << value << endl;
            return;
        }
        stackArray[++top] = value;
        cout << "Pushed: " << value << endl;
    }

    // Function to pop an element from the stack
    int pop() {
        if (isEmpty()) {
            cout << "Stack Underflow! Unable to pop." << endl;
            return -1; // Return -1 or an appropriate error value
        }
        return stackArray[top--];
    }

    // Function to get the top element of the stack
    int peek() {
        if (isEmpty()) {
            cout << "Stack is empty." << endl;
            return -1; // Return -1 or an appropriate error value
        }
        return stackArray[top];
    }

    // Function to display the stack elements
    void display() {
        if (isEmpty()) {
            cout << "Stack is empty." << endl;
            return;
        }
        cout << "Stack elements: ";
        for (int i = top; i >= 0; i--) {
            cout << stackArray[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    Stack myStack(5); // Create a stack of size 5

    myStack.push(10);
    myStack.push(20);
    myStack.push(30);
    myStack.display();

    cout << "Top element: " << myStack.peek() << endl;

    cout << "Popped: " << myStack.pop() << endl;
    myStack.display();

    return 0;
}
